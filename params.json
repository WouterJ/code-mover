{"name":"Code Mover","tagline":"Library for code migration/refactoring automization","body":"# Code Mover\r\n\r\nSmall library for migrating code, its sort of analagous to database migrations\r\nbut instead of applying changes to a database, you apply it to code.\r\n\r\n*Note this is a proof of concept* at the moment and has much work to be done.\r\n\r\nThis allows you to write and refine code migrations for massive API changes and\r\nrefactorings.\r\n\r\n````php\r\n// app/CodeMoverMigrations/FormFieldMigrator.php\r\n\r\nuse DTL\\CodeMover\\AbstractMigrator;\r\nuse DTL\\CodeMover\\MoverFile;\r\n\r\nclass FormFieldMigrator extends AbstractMigrator\r\n{\r\n    protected $fieldTypeMap = array(\r\n    );\r\n\r\n    public function getName()\r\n    {\r\n        return 'form_fields';\r\n    }\r\n\r\n    public function getDependencies()\r\n    {\r\n        return array('namespaces');\r\n    }\r\n\r\n    public function accepts(MoverFile $file)\r\n    {\r\n        return $file->nameMatches('*Form.php');\r\n    }\r\n\r\n    public function migrate(MoverFile $file)\r\n    {\r\n        $file->findLine('.*foobar.*')->replace('foobar', 'barfoo');\r\n\r\n        $file->findLines(array(\r\n            'use .*?Field;',\r\n            'use .*Group;'\r\n        ))->delete();\r\n\r\n        $file->findLines('$this->add\\(new .*?Field')\r\n            ->replace('\\$this->add\\(new (.*?)Field\\(\\'(.*?)\\'', function ($matches) {\r\n                $fieldType = strtolower($matches[1]);\r\n                return '$this->add('.$matches[2].', '.$fieldType.'\\'';\r\n            });\r\n    }\r\n}\r\n````\r\n\r\nThe above migrator will:\r\n\r\n- Replace `foobar` with `barfoo` on lines matching regex `.*foobar.*`\r\n- Only process files matching the regex pattern `*Form.php`;\r\n- Delete all lines that match either `use .*Field;` or `use .*Group`\r\n- Will replace lines like `$this->add(new TextAreaField('field_name')` with `$this->add('field_name', 'textarea');`\r\n\r\nYou can run it on some code:\r\n\r\n````bash\r\nphp bin/codemover.php migrate ~/myproject/app/CodeMoverMigrations \\\r\n    --path ~/myproject/src/Bundle1 \\\r\n    --path ~/myproject/src/Bundle2 \\\r\n    --name \"*CreateForm.php\"\r\n````\r\n\r\nThis will:\r\n\r\n- Run all the migration classes in `~/myproject/app/CodeMoverMigrations`\r\n- On the code contained in `~/myproject/src/Bundle1` and `~/myproject/src/Bundle2`\r\n- Only on filenames matching `*CreateForm.php`\r\n\r\nAnd generate some output like:\r\n\r\n````bash\r\nAdding migrator: FormFieldMigrator\r\nAdding migrator: NamespacesMigrator\r\nResolved migrator order: namespaces, form_fields\r\nMigrator \"namespaces\" accepts file \"/home/daniel/www/yProximite/yProx/src/Ylly/CmsBundle/Form/Admin/SiteCreateForm.php\"\r\n  -namespace Ylly\\CmsBundle\\Form\\Admin;\r\n  +namespace Ylly\\CmsBundle\\Form\\Type\\Admin;\r\nMigrator \"form_fields\" accepts file \"/home/daniel/www/yProximite/yProx/src/Ylly/CmsBundle/Form/Admin/SiteCreateForm.php\"\r\n  -use Ylly\\OldFormBundle\\Form\\TextField;\r\n  -use Ylly\\OldFormBundle\\Form\\ChoiceField;\r\n  -use Ylly\\OldFormBundle\\Form\\CheckboxField;\r\n  -use Ylly\\OldFormBundle\\Form\\FieldGroup;\r\n  -use Ylly\\CmsBundle\\Inheritance\\Form\\InheritanceField;\r\n  -            $this->add(new ChoiceField('company', array(\r\n  +            $this->add(company, choice', array(\r\n  -            $this->add(new TextField('bundleName'));\r\n  +            $this->add(bundleName, text'));\r\n  -        $this->add(new TextField('title'));\r\n  -        $this->add(new TextField('host'));\r\n  -        $this->add(new TextField('localesAsCsv'));\r\n  -        $this->add(new TextField('defaultLocale'));\r\n  +        $this->add(title, text'));\r\n  +        $this->add(host, text'));\r\n  +        $this->add(localesAsCsv, text'));\r\n  +        $this->add(defaultLocale, text'));\r\n  -        $this->add(new ChoiceField('statisticsEngine', array('choices' => $statisticsEngines)));\r\n  +        $this->add(statisticsEngine, choice', array('choices' => $statisticsEngines)));\r\n  -        $this->add(new CheckboxField('enableExternalLinks'));\r\n  -        $this->add(new CheckboxField('enableDir'));\r\n  +        $this->add(enableExternalLinks, checkbox'));\r\n  +        $this->add(enableDir, checkbox'));\r\n````\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}